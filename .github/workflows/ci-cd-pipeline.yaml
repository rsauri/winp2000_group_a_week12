name: CI/CD Pipeline for AKS Deployment

on:
  push:
    branches:
      - master  # Trigger CI/CD when changes are pushed to the master branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx (if using Docker)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Set up Azure CLI to authenticate
      - name: Set up Azure CLI
        uses: azure/setup-azurecli@v1

      # Log in to Azure
      - name: Login to Azure using Managed Identity
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        federated-token: ${{ secrets.GITHUB_TOKEN }}

      # Set the Azure subscription
      - name: Set Azure subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Build Docker image (if using Docker)
      - name: Build and push Docker image to ACR
        run: |
          az acr build --registry ${{ secrets.ACR_NAME }} --image go-app/go-app:latest .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Azure CLI to authenticate
      - name: Set up Azure CLI
        uses: azure/setup-azurecli@v1

      # Log in to Azure
      - name: Login to Azure using Managed Identity
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        federated-token: ${{ secrets.GITHUB_TOKEN }}

      # Set the Azure subscription
      - name: Set Azure subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      # Get AKS credentials
      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      # Deploy to AKS using kubectl
      - name: Deploy to AKS
        run: |
          kubectl apply -f go-app-aks-deployment.yaml

      # Check deployment status
      - name: Check deployment status
        run: kubectl rollout status deployment/go-app

      # Optional: Run a test to ensure the app is working
      - name: Test Application
        run: curl -f http://$(kubectl get svc go-app -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
